import { Schema } from "../../Types/SchemaType";
import { IDatabase } from "../IDatabase";
import MYSQL from "mysql2/promise";
import { SearchQuery } from "../../Types/SearchQuery";
import { DocumentConstructor } from "../../Types/DocumentConstructor";
export declare class MySQL implements IDatabase<Schema> {
    constructor();
    findAllAndDelete(modelName: string, query?: SearchQuery<Schema> | undefined): Promise<object[]>;
    findAllAndUpdate(modelName: string, query: SearchQuery<Schema> | undefined, data: DocumentConstructor<Schema>): Promise<object[]>;
    findOne(modelName: string, query: SearchQuery<Schema>): Promise<object | null>;
    findOneAndDelete(modelName: string, query: SearchQuery<Schema>): Promise<object | null>;
    findOneAndUpdate(modelName: string, query: SearchQuery<Schema>, data: DocumentConstructor<Schema>): Promise<object | null>;
    replaceOne(modelName: string, query: SearchQuery<Schema>, data: DocumentConstructor<Schema>): Promise<object | null>;
    replaceAll(modelName: string, query: SearchQuery<Schema> | undefined, data: DocumentConstructor<Schema>): Promise<object[]>;
    create(modelName: string, data: DocumentConstructor<Schema>): Promise<object>;
    createMany(modelName: string, data: DocumentConstructor<Schema>[]): Promise<object[]>;
    deleteOne(modelName: string, query: SearchQuery<Schema>): Promise<object | null>;
    deleteMany(modelName: string, query: SearchQuery<Schema>): Promise<object[]>;
    updateOne(modelName: string, query: SearchQuery<Schema>, data: DocumentConstructor<Schema>): Promise<object | null>;
    updateMany(modelName: string, query: SearchQuery<Schema>, data: DocumentConstructor<Schema>): Promise<object[]>;
    private host;
    setHost(host: string): void;
    private user;
    setUser(user: string): void;
    private password;
    setPassword(password: string): void;
    private database;
    setDatabase(database: string): void;
    private waitForConnections;
    setWaitForConnections(waitForConnections: boolean): void;
    private connectionLimit;
    setConnectionLimit(connectionLimit: number): void;
    private queueLimit;
    setQueueLimit(queueLimit: number): void;
    private maxIdle;
    setMaxIdle(maxIdle: number): void;
    private idleTimeout;
    setIdleTimeout(idleTimeout: number): void;
    private connection;
    getConnection(): MYSQL.Pool;
    private setConnection;
    connect(): Promise<void>;
    build(): void;
    private buildWhereQuery;
    findAll<T extends Schema>(modelName: string, query?: SearchQuery<T>): Promise<Object[]>;
}
